#!/usr/bin/env node

/**
 * Module dependencies.
 */

//example 1
//var app = require('../app1');
//example 2
//var app = require('../app2');
//example 3
//var app = require('../app3');
//example 4
//var app = require('../app4');
//example 5
//var app = require('../app5');
//final configuration
var app = require('../app');


var debug = require('debug')('kitchen:server');
var https = require('https');
var http = require('http');
var mongoose = require('mongoose');
var fs = require('fs');
var path = require('path');
var hskey = fs.readFileSync('./config/key.pem', 'utf8');
var hscert  = fs.readFileSync('./config/cert.pem', 'utf8');
var options = {
  key: hskey,
  cert: hscert
  }

/**
 * Get port from environment and store in Express. HTTP requests
 */
 var host = process.env.HOST || '0.0.0.0';
 var db = process.env.DATABASE || 'mongodb://127.0.0.1:27017/test';
  var port = normalizePort(process.env.PORT || '3000');
    app.set('host', host);
    app.set('db', db);
    app.set('port', port);

/**
 * Create HTTP server.
 */

 var server = http.createServer(app);

/**
 * Create HTTPS server.
 */

/** THIS CAN BE UNCOMMENTED TO OPEN HTTPS
* var sslserver= https.createServer(options, app);
*/

/**
 * Listen on provided port, on all network interfaces.
 */

 mongoose.connect(db, function (error) {
    if (error) {
        console.log(error);
    }else{
      console.log('database connected from server script')
    }
});

server.listen(port, host);
server.on('error', onError);
server.on('listening', onListening);
console.log("Server listening on: " + host +" Port: " + port);
/*
*sslserver.listen(8443,host)
*sslserver.on('error', onError)
*sslserver.on('listening', onListening);
*console.log("Server listening on: " + host +" Port: " + 8443);
*/

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
